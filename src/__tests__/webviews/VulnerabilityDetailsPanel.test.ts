import { describe, it, expect, beforeEach, vi } from 'vitest';
import * as vscode from 'vscode';

import { VulnerabilityDetailsPanel } from '../../webviews/VulnerabilityDetailsPanel';

// Mock vscode
vi.mock('vscode', () => ({
  ViewColumn: {
    One: 1,
  },
  window: {
    createWebviewPanel: vi.fn(),
  },
  extensions: {
    getExtension: vi.fn(() => ({
      extensionUri: 'mock-extension-uri',
    })),
  },
  Uri: {
    joinPath: vi.fn(),
  },
}));

describe('VulnerabilityDetailsPanel', () => {
  let mockVulnerabilityService: any;
  let mockLogger: any;
  let mockWebviewPanel: any;

  beforeEach(() => {
    vi.clearAllMocks();

    mockVulnerabilityService = {
      fetchVulnerabilityDetails: vi.fn(),
    };

    mockLogger = {
      info: vi.fn(),
      warn: vi.fn(),
      error: vi.fn(),
      debug: vi.fn(),
      trace: vi.fn(),
      setLevel: vi.fn(),
      getLevel: vi.fn(),
      child: vi.fn(),
    };

    let htmlContent = '';

    mockWebviewPanel = {
      title: '',
      webview: {
        get html() { return htmlContent; },
        set html(value: string) { htmlContent = value; },
        onDidReceiveMessage: vi.fn(),
      },
      onDidDispose: vi.fn(),
      dispose: vi.fn(),
      reveal: vi.fn(),
    };

    (vscode.window.createWebviewPanel as any).mockReturnValue(mockWebviewPanel);
  });

  describe('Parameter Passing', () => {
    it('should pass vulnerability ID correctly to service', async () => {
      const vulnId = 'test-vuln-123';
      const mockDetails = {
        id: vulnId,
        title: 'Test Vulnerability',
        severity: 'HIGH',
        identifiers: [],
        references: [],
      };

      (mockVulnerabilityService.fetchVulnerabilityDetails as any).mockResolvedValue(mockDetails);

      // Create panel
      VulnerabilityDetailsPanel.createOrShow(vulnId, mockVulnerabilityService, mockLogger);

      // Wait for async operations
      await new Promise(resolve => setTimeout(resolve, 0));

      expect(mockVulnerabilityService.fetchVulnerabilityDetails).toHaveBeenCalledWith(vulnId);
      expect(mockLogger.info).toHaveBeenCalledWith('Loading vulnerability details for webview', {
        vulnId,
        vulnIdType: 'string',
        vulnIdValue: vulnId,
      });
    });

    it('should handle undefined vulnerability ID', async () => {
      const vulnId = undefined as any;

      // Create panel
      VulnerabilityDetailsPanel.createOrShow(vulnId, mockVulnerabilityService, mockLogger);

      // Wait for async operations
      await new Promise(resolve => setTimeout(resolve, 0));

      expect(mockVulnerabilityService.fetchVulnerabilityDetails).toHaveBeenCalledWith(undefined);
      expect(mockLogger.info).toHaveBeenCalledWith('Loading vulnerability details for webview', {
        vulnId: undefined,
        vulnIdType: 'undefined',
        vulnIdValue: undefined,
      });
    });

    it('should handle null vulnerability ID', async () => {
      const vulnId = null as any;

      // Create panel
      VulnerabilityDetailsPanel.createOrShow(vulnId, mockVulnerabilityService, mockLogger);

      // Wait for async operations
      await new Promise(resolve => setTimeout(resolve, 0));

      expect(mockVulnerabilityService.fetchVulnerabilityDetails).toHaveBeenCalledWith(null);
    });

    it('should handle empty string vulnerability ID', async () => {
      const vulnId = '';

      // Create panel
      VulnerabilityDetailsPanel.createOrShow(vulnId, mockVulnerabilityService, mockLogger);

      // Wait for async operations
      await new Promise(resolve => setTimeout(resolve, 0));

      expect(mockVulnerabilityService.fetchVulnerabilityDetails).toHaveBeenCalledWith('');
    });

    it('should handle service returning undefined (vulnerability not found)', async () => {
      const vulnId = 'test-vuln-123';

      (mockVulnerabilityService.fetchVulnerabilityDetails as any).mockResolvedValue(undefined);

      // Create panel
      VulnerabilityDetailsPanel.createOrShow(vulnId, mockVulnerabilityService, mockLogger);

      // Wait for async operations
      await new Promise(resolve => setTimeout(resolve, 10));

      expect(mockLogger.warn).toHaveBeenCalledWith('Vulnerability not found for webview', { vulnId });
    });

    it('should handle service throwing an error', async () => {
      const vulnId = 'test-vuln-123';
      const error = new Error('API Error');

      (mockVulnerabilityService.fetchVulnerabilityDetails as any).mockRejectedValue(error);

      // Create panel
      VulnerabilityDetailsPanel.createOrShow(vulnId, mockVulnerabilityService, mockLogger);

      // Wait for async operations
      await new Promise(resolve => setTimeout(resolve, 10));

      expect(mockLogger.error).toHaveBeenCalledWith(
        'Failed to load vulnerability details for webview',
        error,
        { vulnId }
      );
    });
  });

  describe('Panel Management', () => {
    beforeEach(() => {
      // Reset static currentPanel before each test
      (VulnerabilityDetailsPanel as any).currentPanel = undefined;
    });

    it('should reuse existing panel when called multiple times', async () => {
      const vulnId1 = 'test-vuln-123';
      const vulnId2 = 'test-vuln-456';

      // Mock successful service calls
      (mockVulnerabilityService.fetchVulnerabilityDetails as any).mockResolvedValue({
        id: vulnId1,
        title: 'Test Vulnerability',
        severity: 'HIGH',
        identifiers: [],
        references: [],
      });

      // First call
      VulnerabilityDetailsPanel.createOrShow(vulnId1, mockVulnerabilityService, mockLogger);
      await new Promise(resolve => setTimeout(resolve, 10));

      // Second call
      VulnerabilityDetailsPanel.createOrShow(vulnId2, mockVulnerabilityService, mockLogger);
      await new Promise(resolve => setTimeout(resolve, 10));

      // Should only create one panel
      expect(vscode.window.createWebviewPanel).toHaveBeenCalledTimes(1);
      expect(mockWebviewPanel.reveal).toHaveBeenCalledTimes(1);
    });

    it('should create new panel after disposing existing one', async () => {
      const vulnId1 = 'test-vuln-123';
      const vulnId2 = 'test-vuln-456';

      // Mock successful service calls
      (mockVulnerabilityService.fetchVulnerabilityDetails as any).mockResolvedValue({
        id: vulnId1,
        title: 'Test Vulnerability',
        severity: 'HIGH',
        identifiers: [],
        references: [],
      });

      // First call
      VulnerabilityDetailsPanel.createOrShow(vulnId1, mockVulnerabilityService, mockLogger);
      await new Promise(resolve => setTimeout(resolve, 10));

      // Simulate disposal
      (VulnerabilityDetailsPanel as any).currentPanel = undefined;

      // Second call
      VulnerabilityDetailsPanel.createOrShow(vulnId2, mockVulnerabilityService, mockLogger);
      await new Promise(resolve => setTimeout(resolve, 10));

      // Should create second panel
      expect(vscode.window.createWebviewPanel).toHaveBeenCalledTimes(2);
    });
  });

  describe('Webview Actions', () => {
    let mockMessageHandler: any;

    beforeEach(() => {
      mockMessageHandler = vi.fn();
      // Reset static currentPanel before each test
      (VulnerabilityDetailsPanel as any).currentPanel = undefined;
    });

    it('should call message handler for copyInstructions action', async () => {
      const vulnId = 'test-vuln-123';

      // Mock successful service call
      (mockVulnerabilityService.fetchVulnerabilityDetails as any).mockResolvedValue({
        id: vulnId,
        title: 'Test Vulnerability',
        severity: 'HIGH',
        identifiers: [],
        references: [],
      });

      // Create panel with message handler
      VulnerabilityDetailsPanel.createOrShow(vulnId, mockVulnerabilityService, mockLogger, mockMessageHandler);
      await new Promise(resolve => setTimeout(resolve, 10));

      // Get the message handler from the webview mock
      const messageCallback = mockWebviewPanel.webview.onDidReceiveMessage.mock.calls[0][0];

      // Simulate copy instructions message
      const message = { type: 'copyInstructions' };
      messageCallback(message);

      expect(mockMessageHandler).toHaveBeenCalledWith(message);
    });

    it('should call message handler for sendToChat action', async () => {
      const vulnId = 'test-vuln-123';

      // Mock successful service call
      (mockVulnerabilityService.fetchVulnerabilityDetails as any).mockResolvedValue({
        id: vulnId,
        title: 'Test Vulnerability',
        severity: 'HIGH',
        identifiers: [],
        references: [],
      });

      // Create panel with message handler
      VulnerabilityDetailsPanel.createOrShow(vulnId, mockVulnerabilityService, mockLogger, mockMessageHandler);
      await new Promise(resolve => setTimeout(resolve, 10));

      // Get the message handler from the webview mock
      const messageCallback = mockWebviewPanel.webview.onDidReceiveMessage.mock.calls[0][0];

      // Simulate send to chat message
      const message = { type: 'sendToChat' };
      messageCallback(message);

      expect(mockMessageHandler).toHaveBeenCalledWith(message);
    });

    it('should not call message handler when none provided', async () => {
      const vulnId = 'test-vuln-123';

      // Mock successful service call
      (mockVulnerabilityService.fetchVulnerabilityDetails as any).mockResolvedValue({
        id: vulnId,
        title: 'Test Vulnerability',
        severity: 'HIGH',
        identifiers: [],
        references: [],
      });

      // Create panel without message handler
      VulnerabilityDetailsPanel.createOrShow(vulnId, mockVulnerabilityService, mockLogger);
      await new Promise(resolve => setTimeout(resolve, 10));

      // Get the message handler from the webview mock
      const messageCallback = mockWebviewPanel.webview.onDidReceiveMessage.mock.calls[0][0];

      // Simulate copy instructions message
      const message = { type: 'copyInstructions' };
      messageCallback(message);

      expect(mockMessageHandler).not.toHaveBeenCalled();
    });

    it('should handle unknown message types gracefully', async () => {
      const vulnId = 'test-vuln-123';

      // Mock successful service call
      (mockVulnerabilityService.fetchVulnerabilityDetails as any).mockResolvedValue({
        id: vulnId,
        title: 'Test Vulnerability',
        severity: 'HIGH',
        identifiers: [],
        references: [],
      });

      // Create panel with message handler
      VulnerabilityDetailsPanel.createOrShow(vulnId, mockVulnerabilityService, mockLogger, mockMessageHandler);
      await new Promise(resolve => setTimeout(resolve, 10));

      // Get the message handler from the webview mock
      const messageCallback = mockWebviewPanel.webview.onDidReceiveMessage.mock.calls[0][0];

      // Simulate unknown message type
      const message = { type: 'unknownAction' };
      messageCallback(message);

      // Should not call our message handler for unknown types
      expect(mockMessageHandler).not.toHaveBeenCalled();
    });
  });
});
