import * as vscode from 'vscode';

import type { ILogger } from '../interfaces/ILogger';
import type { VulnerabilityService } from '../services/VulnerabilityService';
import type { DevGridVulnerabilityDetails, DevGridVulnerabilityIdentifier } from '../types';

/**
 * Webview panel for displaying detailed vulnerability information
 */
export class VulnerabilityDetailsPanel {
  public static currentPanel: VulnerabilityDetailsPanel | undefined;
  public static readonly viewType = 'devgridVulnerabilityDetails';
  private static readonly vulnerabilityDetailsBaseUrl = 'https://app.devgrid.io/inventory/vulnerabilities';

  private readonly panel: vscode.WebviewPanel;
  private readonly onMessage?: (message: unknown) => void;
  private disposables: vscode.Disposable[] = [];

  /**
   * Creates or shows the webview panel
   */
  public static createOrShow(vulnId: string, vulnerabilityService: VulnerabilityService, logger: ILogger, onMessage?: (message: unknown) => void) {
    const column = vscode.ViewColumn.One;

    // If we already have a panel, show it
    if (VulnerabilityDetailsPanel.currentPanel) {
      VulnerabilityDetailsPanel.currentPanel.panel.reveal(column);
      void VulnerabilityDetailsPanel.currentPanel.loadVulnerability(vulnId, vulnerabilityService, logger);
      // Update the message handler if provided
      if (onMessage && VulnerabilityDetailsPanel.currentPanel.onMessage !== onMessage) {
        // Note: We can't change the message handler on an existing panel,
        // but the existing handler should work fine
      }
      return;
    }

    // Otherwise, create a new panel
    const panel = vscode.window.createWebviewPanel(
      VulnerabilityDetailsPanel.viewType,
      'DevGrid Vulnerability Details',
      column,
      {
        enableScripts: true,
        localResourceRoots: (() => {
          const extension = vscode.extensions.getExtension('devgrid.devgrid-vscode-extension');
          return extension ? [vscode.Uri.joinPath(extension.extensionUri, 'media')] : [];
        })()
      }
    );

    VulnerabilityDetailsPanel.currentPanel = new VulnerabilityDetailsPanel(panel, onMessage);
    void VulnerabilityDetailsPanel.currentPanel.loadVulnerability(vulnId, vulnerabilityService, logger);
  }

  private constructor(panel: vscode.WebviewPanel, onMessage?: (message: unknown) => void) {
    this.panel = panel;
    this.onMessage = onMessage;

    // Set the webview's initial html content
    this.panel.webview.html = this.getLoadingHtml();

    // Listen for when the panel is disposed
    this.panel.onDidDispose(() => this.dispose(), null, this.disposables);

    // Handle messages from the webview
    this.panel.webview.onDidReceiveMessage(
      async (message) => {
        switch (message.type) {
          case 'openUrl':
            await vscode.env.openExternal(vscode.Uri.parse(message.url));
            break;
          case 'openDashboard':
            // Could implement dashboard opening here if needed
            break;
          case 'copyInstructions':
          case 'sendToChat':
            // Forward to extension for processing
            if (this.onMessage) {
              this.onMessage(message);
            }
            break;
        }
      },
      null,
      this.disposables
    );
  }

  /**
   * Loads and displays vulnerability details
   */
  private async loadVulnerability(vulnId: string, vulnerabilityService: VulnerabilityService, logger: ILogger) {
    try {
      logger.info('Loading vulnerability details for webview', { vulnId, vulnIdType: typeof vulnId, vulnIdValue: vulnId });

      this.panel.title = `DevGrid Vulnerability: ${vulnId}`;
      this.panel.webview.html = this.getLoadingHtml();

      const details = await vulnerabilityService.fetchVulnerabilityDetails(vulnId);

      if (!details) {
        this.panel.webview.html = this.getErrorHtml('Vulnerability not found');
        logger.warn('Vulnerability not found for webview', { vulnId });
        return;
      }

      this.panel.title = `DevGrid: ${details.title}`;
      this.panel.webview.html = this.getHtmlForVulnerability(details);

      logger.info('Successfully loaded vulnerability details in webview', {
        vulnId,
        title: details.title,
        hasIdentifiers: !!details.identifiers?.length,
      });
    } catch (error) {
      logger.error('Failed to load vulnerability details for webview', error as Error, { vulnId });
      this.panel.webview.html = this.getErrorHtml(
        error instanceof Error ? error.message : 'Failed to load vulnerability details'
      );
    }
  }

  /**
   * Gets the HTML for loading state
   */
  private getLoadingHtml(): string {
    return `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>DevGrid Vulnerability Details</title>
        <style>
          body {
            font-family: var(--vscode-font-family);
            font-size: var(--vscode-font-size);
            background-color: var(--vscode-editor-background);
            color: var(--vscode-editor-foreground);
            margin: 0;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
          }
          .loading {
            text-align: center;
          }
          .spinner {
            border: 3px solid var(--vscode-progressBar-background);
            border-top: 3px solid var(--vscode-progressBar-foreground);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
          }
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>
      </head>
      <body>
        <div class="loading">
          <div class="spinner"></div>
          <div>Loading vulnerability details...</div>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * Gets the HTML for error state
   */
  private getErrorHtml(message: string): string {
    const escapedMessage = this.escapeHtml(message);
    return `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>DevGrid Vulnerability Details</title>
        <style>
          body {
            font-family: var(--vscode-font-family);
            font-size: var(--vscode-font-size);
            background-color: var(--vscode-editor-background);
            color: var(--vscode-editor-foreground);
            margin: 0;
            padding: 20px;
          }
          .error {
            background-color: var(--vscode-inputValidation-errorBackground);
            border: 1px solid var(--vscode-inputValidation-errorBorder);
            border-radius: 3px;
            padding: 15px;
            margin: 20px 0;
          }
          .error-icon {
            color: var(--vscode-inputValidation-errorBorder);
            margin-right: 8px;
          }
        </style>
      </head>
      <body>
        <div class="error">
          <span class="error-icon">⚠️</span>
          <strong>Error:</strong> ${escapedMessage}
        </div>
      </body>
      </html>
    `;
  }

  /**
   * Gets the HTML for vulnerability details
   */
  private getHtmlForVulnerability(details: DevGridVulnerabilityDetails): string {
    const severityClass = this.getSeverityClass(details.severity);
    const severityBadge = this.getSeverityBadge(details.severity);
    const vulnerabilityDetailsUrl = this.buildVulnerabilityDetailsUrl(details.id);
    const metadataSection = this.renderMetadataSection(details);
    const identifiersSection = this.renderIdentifiersSection(details.identifiers);
    const attributesSection = this.renderAttributesSection(details.attributes);

    return `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>DevGrid: ${this.escapeHtml(details.title)}</title>
        <style>
          body {
            font-family: var(--vscode-font-family);
            font-size: var(--vscode-font-size);
            background-color: var(--vscode-editor-background);
            color: var(--vscode-editor-foreground);
            margin: 0;
            padding: 0;
            line-height: 1.5;
          }
          .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
          }
          .header {
            border-bottom: 1px solid var(--vscode-panel-border);
            padding-bottom: 15px;
            margin-bottom: 20px;
          }
          .title {
            font-size: 1.5em;
            font-weight: 600;
            margin: 0 0 10px 0;
            display: flex;
            align-items: center;
            gap: 10px;
          }
          .severity-badge {
            padding: 4px 8px;
            border-radius: 3px;
            font-size: 0.8em;
            font-weight: 500;
            text-transform: uppercase;
          }
          .severity-critical { background-color: #d13438; color: white; }
          .severity-high { background-color: #f48771; color: black; }
          .severity-medium { background-color: #cca700; color: black; }
          .severity-low { background-color: #4ec9b0; color: black; }
          .severity-unknown { background-color: var(--vscode-badge-background); color: var(--vscode-badge-foreground); }
          .status {
            color: var(--vscode-descriptionForeground);
            font-size: 0.9em;
          }
          .section {
            margin-bottom: 25px;
          }
          .section-title {
            font-weight: 600;
            margin-bottom: 8px;
            color: var(--vscode-textLink-foreground);
          }
          .package-info {
            background-color: var(--vscode-textBlockQuote-background);
            border-left: 3px solid var(--vscode-textBlockQuote-border);
            padding: 10px 15px;
            margin: 10px 0;
          }
          .metadata-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 12px;
          }
          .metadata-item {
            background-color: var(--vscode-editorWidget-background);
            border: 1px solid var(--vscode-panel-border);
            border-radius: 3px;
            padding: 10px 12px;
          }
          .metadata-label {
            font-size: 0.75em;
            text-transform: uppercase;
            letter-spacing: 0.04em;
            color: var(--vscode-descriptionForeground);
            margin-bottom: 4px;
            display: block;
          }
          .metadata-value {
            font-family: var(--vscode-editor-font-family);
            word-break: break-word;
          }
          .metadata-value a {
            color: var(--vscode-textLink-foreground);
            text-decoration: none;
          }
          .metadata-value a:hover {
            text-decoration: underline;
          }
          .identifier-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
            gap: 16px;
          }
          .identifier-card {
            background-color: var(--vscode-editorWidget-background);
            border: 1px solid var(--vscode-panel-border);
            border-radius: 4px;
            padding: 14px 16px;
            display: flex;
            flex-direction: column;
            gap: 10px;
          }
          .identifier-header {
            display: flex;
            flex-direction: column;
            gap: 4px;
          }
          .identifier-type {
            font-size: 0.75em;
            font-weight: 600;
            text-transform: uppercase;
            color: var(--vscode-descriptionForeground);
          }
          .identifier-value {
            font-family: var(--vscode-editor-font-family);
            font-size: 1.05em;
            word-break: break-word;
          }
          .identifier-link {
            color: var(--vscode-textLink-foreground);
            text-decoration: none;
            font-size: 0.9em;
          }
          .identifier-link:hover {
            text-decoration: underline;
          }
          .identifier-description {
            font-size: 0.9em;
            color: var(--vscode-descriptionForeground);
            line-height: 1.4;
          }
          .identifier-meta {
            display: flex;
            flex-direction: column;
            gap: 4px;
          }
          .identifier-subtitle {
            font-weight: 600;
            font-size: 0.85em;
            color: var(--vscode-descriptionForeground);
          }
          .identifier-meta-row {
            display: flex;
            justify-content: space-between;
            gap: 12px;
            font-size: 0.85em;
          }
          .identifier-meta-label {
            color: var(--vscode-descriptionForeground);
            white-space: nowrap;
          }
          .identifier-meta-value {
            font-family: var(--vscode-editor-font-family);
            text-align: right;
            word-break: break-word;
          }
          .identifier-weaknesses {
            display: flex;
            flex-wrap: wrap;
            gap: 6px;
          }
          .identifier-weakness {
            background-color: var(--vscode-badge-background);
            color: var(--vscode-badge-foreground);
            border-radius: 3px;
            padding: 2px 6px;
            font-size: 0.75em;
          }
          .identifier-json {
            background-color: var(--vscode-editor-background);
            border: 1px solid var(--vscode-panel-border);
            border-radius: 4px;
            padding: 8px;
            font-family: var(--vscode-editor-font-family);
            font-size: 0.8em;
            white-space: pre-wrap;
            word-break: break-word;
          }
          .attributes-block {
            background-color: var(--vscode-editorWidget-background);
            border: 1px solid var(--vscode-panel-border);
            border-radius: 4px;
            padding: 12px;
            overflow-x: auto;
          }
          .attributes-block pre {
            margin: 0;
            font-family: var(--vscode-editor-font-family);
            font-size: 0.85em;
            white-space: pre-wrap;
          }
          .cvss-score {
            font-weight: 600;
            font-size: 1.1em;
            color: var(--vscode-charts-red);
          }
          .cvss-vector {
            font-family: var(--vscode-editor-font-family);
            font-size: 0.9em;
            color: var(--vscode-descriptionForeground);
          }
          .description {
            line-height: 1.6;
            white-space: pre-wrap;
          }
          .remediation {
            background-color: var(--vscode-textBlockQuote-background);
            border-left: 3px solid var(--vscode-charts-green);
            padding: 10px 15px;
            margin: 10px 0;
          }
          .remediation-title {
            font-weight: 600;
            margin-bottom: 5px;
          }
          .references {
            margin: 10px 0;
          }
          .reference {
            margin: 5px 0;
          }
          .reference-link {
            color: var(--vscode-textLink-foreground);
            text-decoration: none;
          }
          .reference-link:hover {
            text-decoration: underline;
          }
          .actions {
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid var(--vscode-panel-border);
          }
          .button {
            background-color: var(--vscode-button-background);
            color: var(--vscode-button-foreground);
            border: none;
            padding: 8px 16px;
            border-radius: 3px;
            cursor: pointer;
            font-size: var(--vscode-font-size);
            margin-right: 10px;
          }
          .button:hover {
            background-color: var(--vscode-button-hoverBackground);
          }
          .button.secondary {
            background-color: var(--vscode-button-secondaryBackground);
            color: var(--vscode-button-secondaryForeground);
          }
          .button.secondary:hover {
            background-color: var(--vscode-button-secondaryHoverBackground);
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="title">
              ${this.escapeHtml(details.title)}
              <span class="severity-badge severity-${severityClass}">${severityBadge}</span>
            </div>
            ${details.status ? `<div class="status">Status: ${this.escapeHtml(details.status)}</div>` : ''}
          </div>

          ${(details.packageName || details.versionRange) ? `
            <div class="section">
              <div class="section-title">Package Information</div>
              <div class="package-info">
                ${details.packageName ? `<strong>Package:</strong> ${this.escapeHtml(details.packageName)}<br>` : ''}
                ${details.versionRange ? `<strong>Version Range:</strong> ${this.escapeHtml(details.versionRange)}` : ''}
              </div>
            </div>
          ` : ''}

          ${metadataSection}

          ${identifiersSection}

          ${details.cvss ? `
            <div class="section">
              <div class="section-title">CVSS Score</div>
              <div class="cvss-score">${details.cvss.baseScore?.toFixed(1) ?? 'N/A'}</div>
              ${details.cvss.vector ? `<div class="cvss-vector">${this.escapeHtml(details.cvss.vector)}</div>` : ''}
            </div>
          ` : ''}

          ${details.description ? `
            <div class="section">
              <div class="section-title">Description</div>
              <div class="description">${this.escapeHtml(details.description)}</div>
            </div>
          ` : ''}

          ${details.remediation ? `
            <div class="section">
              <div class="section-title">Remediation</div>
              <div class="remediation">
                ${details.remediation.fixedVersion ? `<div class="remediation-title">Fixed Version:</div><div>${this.escapeHtml(details.remediation.fixedVersion)}</div>` : ''}
                ${details.remediation.advice ? `<div class="remediation-title" style="margin-top: 10px;">Advice:</div><div>${this.escapeHtml(details.remediation.advice)}</div>` : ''}
              </div>
            </div>
          ` : ''}

          ${attributesSection}

          ${details.references && details.references.length > 0 ? `
            <div class="section">
              <div class="section-title">References</div>
              <div class="references">
                ${details.references.map(ref =>
                  `<div class="reference">
                    <a href="#" class="reference-link" onclick="openUrl('${this.escapeAttribute(ref.url)}')">
                      ${ref.title ? this.escapeHtml(ref.title) : 'Reference'}
                    </a>
                  </div>`
                ).join('')}
              </div>
            </div>
          ` : ''}

          <div class="actions">
            ${vulnerabilityDetailsUrl ? `<button class="button" onclick="openUrl('${this.escapeAttribute(vulnerabilityDetailsUrl)}')">Open Vulnerability</button>` : ''}
            ${details.referenceUrl ? `<button class="button secondary" onclick="openUrl('${this.escapeAttribute(details.referenceUrl)}')">Open in Scanner</button>` : ''}
            <button class="button secondary" onclick="openDashboard()">Open Dashboard</button>
            <button class="button" onclick="copyInstructions()">Copy Instructions</button>
            <button class="button secondary" onclick="sendToChat()">Send to Chat</button>
          </div>
        </div>

        <script>
          const vscode = acquireVsCodeApi();

          function openUrl(url) {
            vscode.postMessage({
              type: 'openUrl',
              url: url
            });
          }

          function openDashboard() {
            vscode.postMessage({
              type: 'openDashboard'
            });
          }

          function copyInstructions() {
            vscode.postMessage({
              type: 'copyInstructions'
            });
          }

          function sendToChat() {
            vscode.postMessage({
              type: 'sendToChat'
            });
          }
        </script>
      </body>
      </html>
    `;
  }

  /**
   * Builds the public vulnerability details URL
   */
  private buildVulnerabilityDetailsUrl(id: string | undefined): string | undefined {
    if (!id) {
      return undefined;
    }
    const sanitizedId = encodeURIComponent(id);
    return `${VulnerabilityDetailsPanel.vulnerabilityDetailsBaseUrl}/${sanitizedId}`;
  }

  private renderMetadataSection(details: DevGridVulnerabilityDetails): string {
    const rows = [
      { label: 'Originating System', value: details.originatingSystem },
      { label: 'Originating System ID', value: details.originatingSystemId },
      { label: 'Scan Type', value: details.scanType },
      { label: 'Location', value: details.location },
      { label: 'Open Date', value: details.openDate },
      { label: 'Close Date', value: details.closeDate },
      { label: 'Vulnerable ID', value: details.vulnerableId },
      { label: 'Vulnerable Type', value: details.vulnerableType },
      { label: 'Originating System URL', value: details.originatingSystemUrl, url: details.originatingSystemUrl },
    ].filter((row) => this.isNonEmpty(row.value));

    if (rows.length === 0) {
      return '';
    }

    const content = rows
      .map((row) => {
        const value = row.value ?? '';
        const displayText = this.formatSimpleValue(value);
        const valueHtml = row.url
          ? `<a href="#" onclick="openUrl('${this.escapeAttribute(row.url)}'); return false;">${displayText}</a>`
          : displayText;
        return `
          <div class="metadata-item">
            <span class="metadata-label">${this.escapeHtml(row.label)}</span>
            <span class="metadata-value">${valueHtml}</span>
          </div>`;
      })
      .join('');

    return `
            <div class="section">
              <div class="section-title">Metadata</div>
              <div class="metadata-grid">
                ${content}
              </div>
            </div>`;
  }

  private renderIdentifiersSection(identifiers?: DevGridVulnerabilityIdentifier[]): string {
    if (!identifiers || identifiers.length === 0) {
      return '';
    }

    const items = identifiers
      .map((identifier, index) => this.renderIdentifierCard(identifier, index))
      .join('');

    return `
            <div class="section">
              <div class="section-title">Vulnerability Identifiers</div>
              <div class="identifier-grid">
                ${items}
              </div>
            </div>`;
  }

  private renderIdentifierCard(identifier: DevGridVulnerabilityIdentifier, _index: number): string {
    const header = `
          <div class="identifier-header">
            <span class="identifier-type">${this.escapeHtml(identifier.type)}</span>
            <span class="identifier-value">${this.escapeHtml(identifier.value)}</span>
          </div>`;

    const link = identifier.url
      ? `<a href="#" class="identifier-link" onclick="openUrl('${this.escapeAttribute(identifier.url)}'); return false;">Open Identifier</a>`
      : '';

    const description = this.isNonEmpty(identifier.description)
      ? `<div class="identifier-description">${this.escapeHtml(identifier.description ?? '')}</div>`
      : '';

    const metaEntries = [
      { label: 'Name', value: identifier.name },
      { label: 'Published', value: identifier.publishedDate },
      { label: 'CVSS Score', value: this.formatScore(identifier.cvssScore) },
      { label: 'CVSS Vector', value: identifier.vectorString },
      { label: 'EPSS Score', value: this.formatScore(identifier.epssScore) },
      { label: 'Impact Score', value: this.formatScore(identifier.impactScore) },
      { label: 'Exploitability Score', value: this.formatScore(identifier.exploitabilityScore) },
      { label: 'Attack Vector', value: identifier.attackVector },
      { label: 'Attack Complexity', value: identifier.attackComplexity },
    ].filter((entry) => this.isNonEmpty(entry.value));

    const metaHtml = metaEntries.length
      ? `
          <div class="identifier-meta">
            ${metaEntries
              .map(
                (entry) => `
              <div class="identifier-meta-row">
                <span class="identifier-meta-label">${this.escapeHtml(entry.label)}</span>
                <span class="identifier-meta-value">${this.formatSimpleValue(entry.value)}</span>
              </div>`
              )
              .join('')}
          </div>`
      : '';

    const weaknessesHtml = identifier.weaknesses && identifier.weaknesses.length
      ? `
          <div>
            <div class="identifier-subtitle">Weaknesses</div>
            <div class="identifier-weaknesses">
              ${identifier.weaknesses.map((weakness) => `<span class="identifier-weakness">${this.escapeHtml(weakness)}</span>`).join('')}
            </div>
          </div>`
      : '';

    const referencesHtml = this.isNonEmpty(identifier.references)
      ? `
          <div>
            <div class="identifier-subtitle">References</div>
            <div class="identifier-json">${this.formatJsonForDisplay(identifier.references)}</div>
          </div>`
      : '';

    const metricsHtml = this.isNonEmpty(identifier.metrics)
      ? `
          <div>
            <div class="identifier-subtitle">Metrics</div>
            <div class="identifier-json">${this.formatJsonForDisplay(identifier.metrics)}</div>
          </div>`
      : '';

    return `
          <div class="identifier-card">
            ${header}
            ${link}
            ${description}
            ${metaHtml}
            ${weaknessesHtml}
            ${referencesHtml}
            ${metricsHtml}
          </div>`;
  }

  private renderAttributesSection(attributes: unknown): string {
    if (!this.isNonEmpty(attributes)) {
      return '';
    }

    let serialized = '';
    try {
      serialized = JSON.stringify(attributes, null, 2);
    } catch {
      serialized = String(attributes);
    }

    return `
            <div class="section">
              <div class="section-title">Attributes</div>
              <div class="attributes-block">
                <pre>${this.escapeHtml(serialized)}</pre>
              </div>
            </div>`;
  }

  private formatScore(value?: number): string | undefined {
    if (value === undefined || value === null || Number.isNaN(value)) {
      return undefined;
    }
    return Number.isInteger(value) ? value.toString() : value.toFixed(2);
  }

  private formatJsonForDisplay(value: unknown): string {
    if (value === undefined || value === null) {
      return '';
    }

    if (typeof value === 'string') {
      return this.escapeHtml(value);
    }

    try {
      return this.escapeHtml(JSON.stringify(value, null, 2));
    } catch {
      return this.escapeHtml(String(value));
    }
  }

  private formatSimpleValue(value: unknown): string {
    if (value === undefined || value === null) {
      return '';
    }

    if (typeof value === 'string') {
      return this.escapeHtml(value);
    }

    if (typeof value === 'number' || typeof value === 'boolean') {
      return this.escapeHtml(String(value));
    }

    if (Array.isArray(value) || typeof value === 'object') {
      try {
        return this.escapeHtml(JSON.stringify(value));
      } catch {
        return this.escapeHtml(String(value));
      }
    }

    return this.escapeHtml(String(value));
  }

  private isNonEmpty(value: unknown): boolean {
    if (value === undefined || value === null) {
      return false;
    }
    if (typeof value === 'string') {
      return value.trim().length > 0;
    }
    if (typeof value === 'number') {
      return !Number.isNaN(value);
    }
    if (typeof value === 'boolean') {
      return true;
    }
    if (Array.isArray(value)) {
      return value.length > 0;
    }
    if (typeof value === 'object') {
      return Object.keys(value as Record<string, unknown>).length > 0;
    }
    return false;
  }

  /**
   * Gets severity class for styling
   */
  private getSeverityClass(severity: string): string {
    return severity.toLowerCase();
  }

  /**
   * Gets severity badge text
   */
  private getSeverityBadge(severity: string): string {
    return severity.charAt(0).toUpperCase() + severity.slice(1).toLowerCase();
  }

  /**
   * Escapes HTML characters for safe display
   */
  private escapeHtml(value: unknown): string {
    const text = value === undefined || value === null ? '' : String(value);
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#x27;')
      .replace(/\//g, '&#x2F;');
  }

  /**
   * Escapes attribute values for safe use in HTML attributes
   */
  private escapeAttribute(value: unknown): string {
    const text = value === undefined || value === null ? '' : String(value);
    return text
      .replace(/&/g, '&amp;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
  }

  /**
   * Disposes the panel
   */
  public dispose() {
    VulnerabilityDetailsPanel.currentPanel = undefined;

    this.panel.dispose();

    while (this.disposables.length) {
      const disposable = this.disposables.pop();
      if (disposable) {
        disposable.dispose();
      }
    }
  }
}
