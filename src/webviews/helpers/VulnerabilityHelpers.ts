import type { DevGridVulnerabilityDetails, DevGridVulnerabilityIdentifier } from '../../types';

const VULN_DETAILS_BASE_URL = 'https://app.devgrid.io/inventory/vulnerabilities';

export function buildVulnerabilityDetailsUrl(id: string | undefined): string | undefined {
  if (!id) return undefined;
  return `${VULN_DETAILS_BASE_URL}/${encodeURIComponent(id)}`;
}

export function getSeverityClass(severity: string): string {
  const value = (severity ?? 'unknown').toLowerCase();
  switch (value) {
    case 'critical':
      return 'severity-critical';
    case 'high':
      return 'severity-high';
    case 'medium':
      return 'severity-medium';
    case 'low':
      return 'severity-low';
    default:
      return 'severity-unknown';
  }
}

export function getSeverityBadge(severity: string): string {
  const value = (severity ?? 'unknown').toLowerCase();
  switch (value) {
    case 'critical':
      return 'CRITICAL';
    case 'high':
      return 'HIGH';
    case 'medium':
      return 'MEDIUM';
    case 'low':
      return 'LOW';
    default:
      return 'UNKNOWN';
  }
}

export function formatScore(value?: number): string | undefined {
  if (typeof value !== 'number' || Number.isNaN(value)) return undefined;
  return value.toFixed(1);
}

export function formatJsonForDisplay(value: unknown): string {
  try {
    if (typeof value === 'string') {
      const parsed = JSON.parse(value);
      return JSON.stringify(parsed, null, 2);
    }
    return JSON.stringify(value, null, 2);
  } catch {
    return String(value);
  }
}

export function formatSimpleValue(value: unknown): string {
  try {
    if (value === null || value === undefined) return '';
    if (typeof value === 'string') return value;
    if (typeof value === 'number' || typeof value === 'boolean') return String(value);
    return JSON.stringify(value);
  } catch {
    return String(value);
  }
}

export function escapeHtml(value: unknown): string {
  const str = value === undefined || value === null ? '' : String(value);
  return str
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

export function escapeAttribute(value: unknown): string {
  // Attribute context uses same escaping as HTML plus encode URI components where applicable
  const str = value === undefined || value === null ? '' : String(value);
  return escapeHtml(str);
}

// Convenience renderers that may be reused by templates/renderers
export function renderIdentifierCard(identifier: DevGridVulnerabilityIdentifier, index?: number): string {
  const title = identifier.type ? `${escapeHtml(identifier.type)}: ${escapeHtml(identifier.value ?? '')}` : escapeHtml(identifier.value ?? '');
  const link = identifier.url ? `<a href="#" class="identifier-link" onclick="openUrl('${escapeAttribute(identifier.url)}')">Open</a>` : '';
  return `
    <div class="identifier-card" data-index="${index ?? 0}">
      <div class="identifier-title">${title}</div>
      ${link}
    </div>
  `;
}

export function renderMetadataGrid(details: DevGridVulnerabilityDetails): string {
  const rows: string[] = [];
  if (details.status) rows.push(`<div><strong>Status:</strong> ${escapeHtml(details.status)}</div>`);
  if (details.originatingSystem) rows.push(`<div><strong>Source:</strong> ${escapeHtml(details.originatingSystem)}</div>`);
  if (details.originatingSystemId) rows.push(`<div><strong>Source ID:</strong> ${escapeHtml(details.originatingSystemId)}</div>`);
  if (details.scanType) rows.push(`<div><strong>Scan Type:</strong> ${escapeHtml(details.scanType)}</div>`);
  if (details.location) rows.push(`<div><strong>Location:</strong> ${escapeHtml(details.location)}</div>`);
  if (details.openDate) rows.push(`<div><strong>Opened:</strong> ${escapeHtml(details.openDate)}</div>`);
  if (details.closeDate) rows.push(`<div><strong>Closed:</strong> ${escapeHtml(details.closeDate)}</div>`);
  return rows.join('');
}


